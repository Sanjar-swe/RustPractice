// fn main() {
//     println!("Hello, world!");
// }

//
// cargo new hello_cargo - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
// cd hello_cargo
// cargo run main.rs —Å–∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏ –∑–∞–ø—É—Å—Ç–∏—Ç

// cargo build - —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞

// cargo check - –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à –∫–æ–¥ –Ω–∞ –æ—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏, –Ω–æ –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª. –≠—Ç–æ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º cargo build, –∏ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

// cargo test - –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã

//
//
//

// –û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ó–∞–¥–∞—á–µ 3: –ë–∞–∑–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Rust. –°–µ–π—á–∞—Å –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —è–∑—ã–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö, —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
// –í—ã –º–æ–∂–µ—Ç–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª src/main.rs –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ hello_cargo, —á—Ç–æ–±—ã –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è.

//     –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
//         –û–±—ä—è–≤–ª—è—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é let. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–Ω–∏ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã (immutable).
//         –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑–º–µ–Ω—è–µ–º–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ mut: let mut age = 30; age = 31;
//         –ú–æ–∂–Ω–æ "–ø–µ—Ä–µ–∑–∞—Ç–µ–Ω—è—Ç—å" (shadowing) –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: let x = 5; let x = x + 1;
//     –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:
//         –°–∫–∞–ª—è—Ä–Ω—ã–µ:
//             –¶–µ–ª—ã–µ —á–∏—Å–ª–∞: i8, u8, i32 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é), u64, isize (—Ä–∞–∑–º–µ—Ä —É–∫–∞–∑–∞—Ç–µ–ª—è) –∏ —Ç.–¥.
//             –ß–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π: f32, f64 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
//             –ë—É–ª–µ–≤—ã: true, false.
//             –°–∏–º–≤–æ–ª—ã: char (–æ–¥–∏–Ω —Å–∏–º–≤–æ–ª Unicode, –≤ –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö: 'a', 'üòä').

// –°–æ—Å—Ç–∞–≤–Ω—ã–µ:

//     –ö–æ—Ä—Ç–µ–∂–∏ (Tuples): –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã. let tup: (i32, f64, u8) = (500, 6.4, 1); –î–æ—Å—Ç—É–ø –ø–æ –∏–Ω–¥–µ–∫—Å—É: tup.0.
//     –ú–∞—Å—Å–∏–≤—ã (Arrays): –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞. let a: [i32; 5] = [1, 2, 3, 4, 5]; –î–æ—Å—Ç—É–ø –ø–æ –∏–Ω–¥–µ–∫—Å—É: a[0].

// Rust —á–∞—Å—Ç–æ –º–æ–∂–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ —Ç–∏–ø —Å–∞–º (let x = 5; // x –±—É–¥–µ—Ç i32), –Ω–æ –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —è–≤–Ω–æ (let guess: u32 = "42".parse().expect("Not a number!");).

// –§—É–Ω–∫—Ü–∏–∏:

//     –û–±—ä—è–≤–ª—è—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é fn.
//     –ò–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç snake_case (—Å–ª–æ–≤–∞_–≤_–Ω–∏–∂–Ω–µ–º_—Ä–µ–≥–∏—Å—Ç—Ä–µ_—á–µ—Ä–µ–∑_–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ).
//     –ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
//     –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π —è–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.

// fn main() {
//     println!("Hello world");
//     another_function(5, 'h');
//     let sum = add_five(5);
//     println!("Sum is: {}", sum);
// }

// fn another_function(x: i32, unit_label: char) {
//     println!("The value of x is: {}{}", x, unit_label);
// }

// fn add_five(x: i32) -> i32 {
//     x + 5
// }

// –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:

//     –û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ: // –≠—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
//     –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ: /* –≠—Ç–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */
// //     –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–¥–ª—è cargo doc): /// –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ //! –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —ç–ª–µ–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–¥—É–ª—å –∏–ª–∏ –∫—Ä–µ–π—Ç).
// fn main() {
//     // –ù–µ–∏–∑–º–µ–Ω—è–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
//     let lucky_number = 7;
//     // –ò–∑–º–µ–Ω—è–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
//     let mut count = 0;

//     println!("Initial count: {}", count);
//     count = count + 1;

//     // –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
//     print_info(lucky_number, count);
// }

// /// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
// fn print_info(num: i32, current_count: i32) {
//     println!("Lucky_number is: {}", num);
//     println!("current_count is: {}", current_count);
//     let is_lucky = true;
//     let initial = 'L';
//     println!("Is it lucky? {}, Initial: {}", is_lucky, initial);
// }
